<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>joda-time</title>
    <url>/2021/05/05/joda-time/</url>
    <content><![CDATA[<p>简介：Joda-Time这个专门处理日期时间的库。</p>
<img src="/2021/05/05/joda-time/joda-time.png" style="zoom: 50%;">

<a id="more"></a>

<h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;joda-time&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;joda-time&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;2.9.2&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure>

<h3 id="核心类介绍"><a href="#核心类介绍" class="headerlink" title="核心类介绍"></a>核心类介绍</h3><p>下面介绍5个最常用的date-time类：</p>
<ul>
<li>Instant - 不可变的类，用来表示时间轴上一个瞬时的点</li>
<li>DateTime - 不可变的类，用于替换JDK的Calendar类</li>
<li>LocalDate - 不可变类，表示一个本地的日期，而不包含时间部分（没有时区信息）</li>
<li>LocalTime - 不可变类，表示一个本地的时间，而不包含日期部分（没有时区信息）</li>
<li>LocalDateTime - 不可变类，表示一个本地的日期-时间（没有时区信息）</li>
</ul>
<h3 id="Instant"><a href="#Instant" class="headerlink" title="Instant"></a>Instant</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.Instant#now()          // 获取当前时间</span><br></pre></td></tr></table></figure>

<h3 id="DateTime"><a href="#DateTime" class="headerlink" title="DateTime"></a>DateTime</h3><figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.DateTime#now()         // 获取当前时间</span><br><span class="line">org.joda.time.DateTime#DateTime(int, int, int, int, int, int)    // 自定义年、月、日、时、分、秒</span><br><span class="line">org.joda.time.DateTime#parse(java.lang.String)     // 字符串转换为时间</span><br><span class="line">org.joda.time.DateTime#withZone(org.joda.time.DateTimeZone)  // 直接修改时区</span><br><span class="line">org.joda.time.DateTime#withDate(int, int, int)               // 直接修改年、月、日</span><br><span class="line">org.joda.time.DateTime#withTime(int, int, int, int)          // 直接修改时、分、秒</span><br><span class="line">org.joda.time.DateTime#withTimeAtStartOfDay()                // 直接修改为当前的开始时间(2021-05-05T00:00:00.000Z)</span><br><span class="line"></span><br><span class="line">org.joda.time.DateTime#withField(org.joda.time.DateTimeFieldType,int)      // 指定那个枚举值为值</span><br><span class="line">org.joda.time.DateTime#withFieldAdded(org.joda.time.DateTimeFieldType,int) // 指定枚举增加多少</span><br><span class="line"></span><br><span class="line">org.joda.time.DateTime#plusYears(int)        // 增加年</span><br><span class="line">org.joda.time.DateTime#plusMonths(int)       // 增加月</span><br><span class="line">org.joda.time.DateTime#plusWeeks(int)        // 增加周</span><br><span class="line">org.joda.time.DateTime#plusDays(int)         // 增加天</span><br><span class="line">org.joda.time.DateTime#plusHours(int)        // 增加小时</span><br><span class="line">org.joda.time.DateTime#plusMinutes(int)      // 增加分钟</span><br><span class="line">org.joda.time.DateTime#plusSeconds(int)      // 增加秒</span><br><span class="line">org.joda.time.DateTime#plusMillis(int)       // 增加毫秒</span><br><span class="line"></span><br><span class="line">org.joda.time.DateTime#minusYears(int)        // 减少年</span><br><span class="line">org.joda.time.DateTime#minusMonths(int)       // 减少月</span><br><span class="line">org.joda.time.DateTime#minusWeeks(int)        // 减少周</span><br><span class="line">org.joda.time.DateTime#minusDays(int)         // 减少天</span><br><span class="line">org.joda.time.DateTime#minusHours(int)        // 减少小时</span><br><span class="line">org.joda.time.DateTime#minusMinutes(int)      // 减少分钟</span><br><span class="line">org.joda.time.DateTime#minusSeconds(int)      // 减少秒</span><br><span class="line">org.joda.time.DateTime#minusMillis(int)       // 减少毫秒</span><br><span class="line"></span><br><span class="line">org.joda.time.DateTime#toLocalDateTime()      // 将dateTime转化为locaDateTime</span><br><span class="line">org.joda.time.DateTime#toLocalDate()          // 将dateTime转化为localDate</span><br><span class="line">org.joda.time.DateTime#toLocalTime()          // 将dateTime转化为localTime</span><br><span class="line"></span><br><span class="line">org.joda.time.DateTime#withYear(int)          // 直接指定年</span><br><span class="line">org.joda.time.DateTime#withWeekyear(int)      // 直接指定周</span><br><span class="line">org.joda.time.DateTime#withMonthOfYear(int)   // 直接指定月</span><br><span class="line">org.joda.time.DateTime#withWeekOfWeekyear(int) // 直接指定周的第几周</span><br><span class="line">org.joda.time.DateTime#withDayOfYear(int)     // 直接指定天</span><br><span class="line">org.joda.time.DateTime#withDayOfMonth(int)    // 直接指定月的第几天</span><br><span class="line"></span><br><span class="line">org.joda.time.DateTime#year()                 // 获取一个property对于year的所有信息</span><br><span class="line">org.joda.time.DateTime#weekyear()</span><br><span class="line">org.joda.time.DateTime#hourOfDay()    </span><br></pre></td></tr></table></figure>

<h3 id="Years"><a href="#Years" class="headerlink" title="Years"></a>Years</h3><p>用于操作年</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.Years#yearsBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant) // 比较时间相差几年</span><br></pre></td></tr></table></figure>

<h3 id="Months"><a href="#Months" class="headerlink" title="Months"></a>Months</h3><p>用于操作月</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.Months#monthsBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant) // 比较两个时间相差几个月</span><br></pre></td></tr></table></figure>

<h3 id="Days"><a href="#Days" class="headerlink" title="Days"></a>Days</h3><p>用于对天的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.Days#daysBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)   // 计算两个时间相差多少天</span><br><span class="line">org.joda.time.Days#standardDaysIn(org.joda.time.ReadablePeriod) // 获取标准的天</span><br><span class="line">org.joda.time.Days#toStandardWeeks()       // 天转换为周</span><br><span class="line">org.joda.time.Days#toStandardHours()       // 天转换为小时</span><br><span class="line">org.joda.time.Days#toStandardMinutes()     // 天转换为分钟</span><br><span class="line">org.joda.time.Days#toStandardSeconds()     // 天转换为秒</span><br><span class="line">org.joda.time.Days#toStandardDuration()    // 天转换为毫秒</span><br><span class="line"></span><br><span class="line">org.joda.time.Days#plus(int)               // 相加天</span><br><span class="line">org.joda.time.Days#minus(int)              // 减少天</span><br><span class="line">org.joda.time.Days#isGreaterThan(Day)      // 大于天</span><br><span class="line">org.joda.time.Days#isLessThan(Day)         // 小于天</span><br></pre></td></tr></table></figure>

<h3 id="Weeks"><a href="#Weeks" class="headerlink" title="Weeks"></a>Weeks</h3><p>用于周的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.Weeks#weeksBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)  // 用于比较两个时间相差多少周</span><br></pre></td></tr></table></figure>

<h3 id="Hours"><a href="#Hours" class="headerlink" title="Hours"></a>Hours</h3><p>用于操作小时</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.Hours#hoursBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)  // 用于比较两个时间相差多少小时</span><br></pre></td></tr></table></figure>

<h3 id="Minutes"><a href="#Minutes" class="headerlink" title="Minutes"></a>Minutes</h3><p>用于操作分钟</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.Minutes#minutesBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant)   // 用于比较两个时间相差多少分钟</span><br></pre></td></tr></table></figure>

<h3 id="Seconds"><a href="#Seconds" class="headerlink" title="Seconds"></a>Seconds</h3><p>用于操作秒</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.joda.time.Seconds#secondsBetween(org.joda.time.ReadableInstant, org.joda.time.ReadableInstant) // 用于比较两个时间相差多少秒</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>joda</category>
      </categories>
      <tags>
        <tag>joda-time</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-BeanUtils</title>
    <url>/2021/05/02/Apache-BeanUtils/</url>
    <content><![CDATA[<p>简介：Apache-common BeanUtil提供了很多的基于类、属性、方法之间的获取和设置的方式</p>
<img src="/2021/05/02/Apache-BeanUtils/propertyUtil.png" style="zoom: 50%;">

<a id="more"></a>

<h2 id="PropertyUtils"><a href="#PropertyUtils" class="headerlink" title="PropertyUtils"></a>PropertyUtils</h2><p><strong><em>本质上是调用PropertyUtilsBean类来实现功能</em></strong></p>
<ol>
<li><p>访问基本数据类型的Bean属性</p>
<ul>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#getSimpleProperty-java.lang.Object-java.lang.String-">PropertyUtils.getSimpleProperty(Object, String)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#setSimpleProperty-java.lang.Object-java.lang.String-java.lang.Object-">PropertyUtils.setSimpleProperty(Object, String, Object)</a></li>
</ul>
<p>示例：</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">String firstName = (String) PropertyUtils.getSimpleProperty(employee, <span class="string">&quot;firstName&quot;</span>);   <span class="comment">// 获取基本类型属性的值</span></span><br><span class="line">String lastName = (String) PropertyUtils.getSimpleProperty(employee, <span class="string">&quot;lastName&quot;</span>);</span><br><span class="line"></span><br><span class="line">PropertyUtils.setSimpleProperty(employee, <span class="string">&quot;firstName&quot;</span>, firstName);                    <span class="comment">// 设置基本类型的属性值</span></span><br><span class="line">PropertyUtils.setSimpleProperty(employee, <span class="string">&quot;lastName&quot;</span>, lastName);</span><br></pre></td></tr></table></figure>



<ol start="2">
<li>访问索引类型的Bean属性</li>
</ol>
<p>获取bean中含有可索引的属性，如果ArrayList、数组等，可以通过下标索引来访问Bean属性的值，同理也可以设置值</p>
<ul>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#getIndexedProperty-java.lang.Object-java.lang.String-">PropertyUtils.getIndexedProperty(Object, String)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#getIndexedProperty-java.lang.Object-java.lang.String-int-">PropertyUtils.getIndexedProperty(Object, String, int)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#setIndexedProperty-java.lang.Object-java.lang.String-java.lang.Object-">PropertyUtils.setIndexedProperty(Object, String, Object)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#setIndexedProperty-java.lang.Object-java.lang.String-int-java.lang.Object-">PropertyUtils.setIndexedProperty(Object, String, int, Object)</a></li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee employee00 = (Employee) PropertyUtils.getIndexedProperty(indexedBean,<span class="string">&quot;employeeList&quot;</span>, <span class="number">0</span>);  <span class="comment">// 获取indexBean中employeeList中的index=0的元素</span></span><br><span class="line">Employee employee11 = (Employee) PropertyUtils.getIndexedProperty(indexedBean,<span class="string">&quot;employeeList&quot;</span>, <span class="number">1</span>);</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>访问Map映射类型的Bean属性</li>
</ol>
<p>获取bean中含有常见的HashMap，TreeMap等，可以通过key来访问Bean属性值，同理可设置value</p>
<ul>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#getMappedProperty-java.lang.Object-java.lang.String-">PropertyUtils.getMappedProperty(Object, String)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#getMappedProperty-java.lang.Object-java.lang.String-java.lang.String-">PropertyUtils.getMappedProperty(Object, String, String)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#setMappedProperty-java.lang.Object-java.lang.String-java.lang.Object-">PropertyUtils.setMappedProperty(Object, String, Object)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#setMappedProperty-java.lang.Object-java.lang.String-java.lang.String-java.lang.Object-">PropertyUtils.setMappedProperty(Object, String, String, Object)</a></li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyUtils.setMappedProperty(employee, <span class="string">&quot;mapProperty&quot;</span>, <span class="string">&quot;testKey1&quot;</span>, <span class="string">&quot;testValue1&quot;</span>);</span><br><span class="line">PropertyUtils.setMappedProperty(employee, <span class="string">&quot;mapProperty(testKey2)&quot;</span>, <span class="string">&quot;testValue2&quot;</span>);</span><br></pre></td></tr></table></figure>

<pre><code>4. 访问嵌套类型的Bean属性</code></pre>
<p>获取bean中含有指的是对象内嵌套对象</p>
<ul>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#getNestedProperty-java.lang.Object-java.lang.String-">PropertyUtils.getNestedProperty(Object, String)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#setNestedProperty-java.lang.Object-java.lang.String-java.lang.Object-">PropertyUtils.setNestedProperty(Object, String, Object)</a></li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String lastName = (String) PropertyUtils.getNestedProperty(nestedBean,<span class="string">&quot;mapProperty(testKey).lastName&quot;</span>);</span><br><span class="line">String lastName2 = (String) PropertyUtils.getNestedProperty(nestedBean,<span class="string">&quot;listProperty[0].lastName&quot;</span>);</span><br></pre></td></tr></table></figure>

<pre><code>5. 访问所有类型的Bean属性</code></pre>
<p>通过以上API的使用，我们了解了各类bean属性的访问方法，其实还有一种通用的方法，适用于各类bean属性类型</p>
<ul>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#getProperty-java.lang.Object-java.lang.String-">PropertyUtils.getProperty(Object, String)</a></li>
<li><a href="http://commons.apache.org/proper/commons-beanutils/javadocs/v1.9.3/apidocs/org/apache/commons/beanutils/PropertyUtils.html#setProperty-java.lang.Object-java.lang.String-java.lang.Object-">PropertyUtils.setProperty(Object, String, Object)</a></li>
</ul>
<p>示例：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">PropertyUtils.setProperty(nestedBean, <span class="string">&quot;listProperty[0].lastName&quot;</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>PropertyUtils依赖于PropertyBeanUtils，其中PropertyBeanUtils中使用到了java.beans包下的 <code>PropertyDescriptor</code></p>
<h2 id="DynaClass-amp-DynaBean"><a href="#DynaClass-amp-DynaBean" class="headerlink" title="DynaClass &amp; DynaBean"></a>DynaClass &amp; DynaBean</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 定义动态属性和类型</span></span><br><span class="line">DynaProperty[] props = <span class="keyword">new</span> DynaProperty[]&#123;</span><br><span class="line">            <span class="keyword">new</span> DynaProperty(<span class="string">&quot;address&quot;</span>, java.util.Map.class),</span><br><span class="line">            <span class="keyword">new</span> DynaProperty(<span class="string">&quot;subordinate&quot;</span>, mypackage.Employee[].class),</span><br><span class="line">            <span class="keyword">new</span> DynaProperty(<span class="string">&quot;firstName&quot;</span>, String.class),</span><br><span class="line">            <span class="keyword">new</span> DynaProperty(<span class="string">&quot;lastName&quot;</span>,  String.class)</span><br><span class="line">          &#125;;</span><br><span class="line"><span class="comment">// 定义动态类，并注入动态属性</span></span><br><span class="line">BasicDynaClass dynaClass = <span class="keyword">new</span> BasicDynaClass(<span class="string">&quot;employee&quot;</span>, <span class="keyword">null</span>, props);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 动态类实例出动态实例对象</span></span><br><span class="line">DynaBean employee = dynaClass.newInstance();</span><br><span class="line"><span class="comment">// 动态实例设置属性值</span></span><br><span class="line">employee.set(<span class="string">&quot;address&quot;</span>, <span class="keyword">new</span> HashMap());</span><br><span class="line">employee.set(<span class="string">&quot;subordinate&quot;</span>, <span class="keyword">new</span> Employee[]&#123;...&#125;);</span><br><span class="line">employee.set(<span class="string">&quot;firstName&quot;</span>, <span class="string">&quot;Fred&quot;</span>);</span><br><span class="line">employee.set(<span class="string">&quot;lastName&quot;</span>, <span class="string">&quot;Flintstone&quot;</span>);</span><br><span class="line"><span class="comment">// 获取动态属性值</span></span><br><span class="line">String firstName = (String) employee.get(<span class="string">&quot;firstName&quot;</span>);</span><br></pre></td></tr></table></figure>

<p>Class 对象 —&gt; class.newInstance 通过类对象实例化一个实例对象<br>constructor 对象 —&gt; constructor.newInstance 同样是实例化一个对象</p>
<h2 id="BasicDynaBean和BasicDynaClass"><a href="#BasicDynaBean和BasicDynaClass" class="headerlink" title="BasicDynaBean和BasicDynaClass"></a>BasicDynaBean和BasicDynaClass</h2><p>先了解下这两个重要的实现，这两个类为DynaBean和DynaClass接口的基础实现类</p>
<p>首先，我们可以这样创建一个<code>DynaClass</code>实例，其中类的成员属性是用<code>DynaProperty</code>类来描述的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DynaProperty[] props = <span class="keyword">new</span> DynaProperty[]</span><br><span class="line">        &#123; </span><br><span class="line">            <span class="keyword">new</span> DynaProperty(<span class="string">&quot;address&quot;</span>, java.util.Map.class),</span><br><span class="line">            <span class="keyword">new</span> DynaProperty(<span class="string">&quot;subordinate&quot;</span>, Employee[].class),</span><br><span class="line">            <span class="keyword">new</span> DynaProperty(<span class="string">&quot;firstName&quot;</span>, String.class),</span><br><span class="line">            <span class="keyword">new</span> DynaProperty(<span class="string">&quot;lastName&quot;</span>, String.class) </span><br><span class="line">        &#125;;</span><br><span class="line">BasicDynaClass dynaClass = <span class="keyword">new</span> BasicDynaClass(<span class="string">&quot;employee&quot;</span>, <span class="keyword">null</span>, props);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里的Class&lt;?&gt; **dynaBeanClass** 参数为空，看下源码就发现，如果为null的话，默认会使用 BasicDynaBean.class；</span></span><br><span class="line"><span class="comment">// 在BasicDyaBean 中保存了一个Hash&lt;String,Object&gt; 用于保存字段名和字段值</span></span><br></pre></td></tr></table></figure>

<h2 id="ResultSetDynaClass"><a href="#ResultSetDynaClass" class="headerlink" title="ResultSetDynaClass"></a>ResultSetDynaClass</h2><p><code>ResultSetDynaClass</code> 继承于 <code>JDBCDynaClass</code> 来处理JDBC的ResultSet结果集，而<code>JDBCDynaClass</code>实现了<code>DynaClass</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sql = <span class="string">&quot;SELECT id, name, address, state FROM user&quot;</span>;</span><br><span class="line">stmt = conn.prepareStatement(sql);</span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"><span class="comment">// **将 ResultSet 结果集包装为 ResultSetDynaClass 类型**</span></span><br><span class="line">Iterator&lt;DynaBean&gt; rows = (<span class="keyword">new</span> ResultSetDynaClass(rs)).iterator();</span><br><span class="line"><span class="keyword">while</span> (rows.hasNext()) &#123;</span><br><span class="line">    DynaBean row = rows.next();</span><br><span class="line">    System.out.print(<span class="string">&quot;id: &quot;</span> + row.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    System.out.print(<span class="string">&quot;, name: &quot;</span> + row.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.print(<span class="string">&quot;, address: &quot;</span> + row.get(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;, state: &quot;</span> + row.get(<span class="string">&quot;state&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ResultSetDynaClass作为SQL查询结果集中的一个动态bean非常实用，但是仍然有一个严重的缺陷，就是使用ResultSetDynaClass的前提是要保证ResultSet一直处于打开状态，这对于分层结构的Web项目来说是非常不便的，因为我们经常需要将数据从dao层传到service层传到view层，而ResultSet在DAO层使用后往往会关闭掉；</p>
<p>为解决这个问题，引入了RowSetDynaClass实现类，与ResultSetDynaClass不同的是，它会自己在内存中拷贝一份数据，这样就保证了即使ResultSet关闭后，数据也能一直被访问到；不过同样也有缺点就是需要消耗性能用于拷贝数据以及占用堆内存空间；</p>
<h2 id="RowSetDynaClass"><a href="#RowSetDynaClass" class="headerlink" title="RowSetDynaClass"></a>RowSetDynaClass</h2><p><code>RowSetDynaClass</code> 继承于 <code>JDBCDynaClass</code> 来处理JDBC的ResultSet结果集，而<code>JDBCDynaClass</code>实现了<code>DynaClass</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"></span><br><span class="line">conn = DriverManager.getConnection(DB_URL, USER, PASS);</span><br><span class="line"></span><br><span class="line">String sql = <span class="string">&quot;SELECT id, name, address, state FROM user&quot;</span>;</span><br><span class="line">stmt = conn.prepareStatement(sql);</span><br><span class="line"></span><br><span class="line">ResultSet rs = stmt.executeQuery(sql);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将结果集进行包装</span></span><br><span class="line">RowSetDynaClass rowSet = <span class="keyword">new</span> RowSetDynaClass(rs);</span><br><span class="line"></span><br><span class="line">rs.close();</span><br><span class="line">stmt.close();</span><br><span class="line">conn.close();</span><br><span class="line"></span><br><span class="line">List&lt;DynaBean&gt; rowlist = rowSet.getRows();</span><br><span class="line"><span class="keyword">for</span> (DynaBean row : rowlist) &#123;</span><br><span class="line">    System.out.print(<span class="string">&quot;id: &quot;</span> + row.get(<span class="string">&quot;id&quot;</span>));</span><br><span class="line">    System.out.print(<span class="string">&quot;, name: &quot;</span> + row.get(<span class="string">&quot;name&quot;</span>));</span><br><span class="line">    System.out.print(<span class="string">&quot;, address: &quot;</span> + row.get(<span class="string">&quot;address&quot;</span>));</span><br><span class="line">    System.out.println(<span class="string">&quot;, state: &quot;</span> + row.get(<span class="string">&quot;state&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="WrapDynaBean和WrapDynaClass"><a href="#WrapDynaBean和WrapDynaClass" class="headerlink" title="WrapDynaBean和WrapDynaClass"></a>WrapDynaBean和WrapDynaClass</h2><p>使用<code>WrapDynaBean</code>，我们可以将普通的<code>javabean</code>包装成<code>DynaBean</code>，并非常简便的使用DynaBean提供的API方法来访问bean成员属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Employee e = <span class="keyword">new</span> Employee();</span><br><span class="line">e.setFirstName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line">DynaBean wrapper = <span class="keyword">new</span> WrapDynaBean(e);</span><br><span class="line">String firstName = (String) wrapper.get(<span class="string">&quot;firstName&quot;</span>);</span><br><span class="line">System.out.println(firstName);</span><br></pre></td></tr></table></figure>

<h2 id="Lazy-DynaBeans"><a href="#Lazy-DynaBeans" class="headerlink" title="Lazy DynaBeans"></a>Lazy DynaBeans</h2><p>Lazy DynaBeans有如下特性：</p>
<p>1、自动添加bean属性，当我们调用<code>set(name, value)方法时，如果属性不存在，会自动添加该属性；</code></p>
<p>2、List、Array属性自动扩容，</p>
<p>3、List、Array属性里的内部元素可以自动创建，实例化</p>
<p>4、Map属性也可以自动创建，实例化</p>
<p>简单的说，使用Lazy DynaBeans的话，你可以大胆调用DynaBean的set、get方法，而不必担心没有属性不存在，集合数组空间不够等问题，Lazy DynaBeans会帮我们自动处理</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">DynaBean dynaBean = <span class="keyword">new</span> LazyDynaBean();</span><br><span class="line"></span><br><span class="line">dynaBean.set(<span class="string">&quot;foo&quot;</span>, <span class="string">&quot;bar&quot;</span>);                   <span class="comment">// simple</span></span><br><span class="line"></span><br><span class="line">dynaBean.set(<span class="string">&quot;customer&quot;</span>, <span class="string">&quot;title&quot;</span>, <span class="string">&quot;Mr&quot;</span>);      <span class="comment">// mapped</span></span><br><span class="line">dynaBean.set(<span class="string">&quot;customer&quot;</span>, <span class="string">&quot;surname&quot;</span>, <span class="string">&quot;Smith&quot;</span>); <span class="comment">// mapped</span></span><br><span class="line"></span><br><span class="line">dynaBean.set(<span class="string">&quot;users&quot;</span>, <span class="number">0</span>, <span class="keyword">new</span> User());     <span class="comment">// indexed</span></span><br><span class="line">dynaBean.set(<span class="string">&quot;users&quot;</span>, <span class="number">1</span>, <span class="keyword">new</span> User());     <span class="comment">// indexed</span></span><br><span class="line">dynaBean.set(<span class="string">&quot;users&quot;</span>, <span class="number">2</span>, <span class="keyword">new</span> User());     <span class="comment">// indexed</span></span><br><span class="line"></span><br><span class="line">System.out.println(dynaBean.get(<span class="string">&quot;customer&quot;</span>, <span class="string">&quot;title&quot;</span>));</span><br></pre></td></tr></table></figure>

<h2 id="BeanComparator"><a href="#BeanComparator" class="headerlink" title="BeanComparator"></a>BeanComparator</h2><p>用于两个Bean之间指定字段的比较</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 定义需要比较的字段</span></span><br><span class="line"><span class="keyword">final</span> BeanComparator&lt;AlphaBean, String&gt; beanComparator = <span class="keyword">new</span> BeanComparator&lt;&gt;(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">// 2. 两个bean之间进行比较 ，注意，**bean1和bean2 都不能为null**</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span> result = beanComparator.compare(alphaBean1, alphaBean2);</span><br></pre></td></tr></table></figure>

<h2 id="BeanMap"><a href="#BeanMap" class="headerlink" title="BeanMap"></a>BeanMap</h2><p>基于java.beans包下的 <code>Introspector</code>  内省来实现</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">BeanMap beanMap = <span class="keyword">new</span> BeanMap(student);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.beanutils2.BeanMap#containsKey(final Object name)    // 判断bean中是否有name属性</span><br><span class="line">org.apache.commons.beanutils2.BeanMap#containsValue(final Object value) // 判断bean中是否有value属性值</span><br><span class="line">org.apache.commons.beanutils2.BeanMap#get(final Object name)            // 获取bean中name属性的值</span><br><span class="line">org.apache.commons.beanutils2.BeanMap#put(final String name, final Object value) // 设置属性和属性值</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理分析</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">transient</span> HashMap&lt;String, Method&gt; readMethods = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">transient</span> HashMap&lt;String, Method&gt; writeMethods = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">transient</span> HashMap&lt;String, Class&lt;? extends Object&gt;&gt; types = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">// BeanMap中会有三个Map分别用于保存字段的 setXX、getXX、字段类型的方法</span></span><br></pre></td></tr></table></figure>

<h2 id="BeanPredicate"><a href="#BeanPredicate" class="headerlink" title="BeanPredicate"></a>BeanPredicate</h2><p>用于比较bean中字段</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义比较断言</span></span><br><span class="line"><span class="keyword">final</span> Predicate&lt;String&gt; p = s -&gt; s.equals(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="comment">// 2.定义BeanPredicate断言，并指定比较**字段名**</span></span><br><span class="line"><span class="keyword">final</span> BeanPredicate&lt;String&gt; predicate = <span class="keyword">new</span> BeanPredicate&lt;&gt;(<span class="string">&quot;stringProperty&quot;</span>, p);</span><br><span class="line"><span class="comment">// 3.进行比较</span></span><br><span class="line">predicate.test(<span class="keyword">new</span> TestBean(<span class="string">&quot;foo&quot;</span>)</span><br></pre></td></tr></table></figure>

<h2 id="BeanPropertyValueChangeConsumer"><a href="#BeanPropertyValueChangeConsumer" class="headerlink" title="BeanPropertyValueChangeConsumer"></a>BeanPropertyValueChangeConsumer</h2><p>用于bean进行设置属性值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义要设置的字段和字段值</span></span><br><span class="line">BeanPropertyValueChangeConsumer consumer = <span class="keyword">new</span> BeanPropertyValueChangeConsumer&lt;&gt;(<span class="string">&quot;floatProperty&quot;</span>, expectedFloatValue)</span><br><span class="line"><span class="comment">// 2.进行设置 --&gt; PropertyUtils.setProperty(object, propertyName, propertyValue);</span></span><br><span class="line">consumer.accept(testBean)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于数组的设置</span></span><br><span class="line"><span class="keyword">new</span> BeanPropertyValueChangeConsumer&lt;&gt;(<span class="string">&quot;intIndexed[0]&quot;</span>, expectedIntegerValue).accept(testBean);</span><br><span class="line"><span class="comment">// 基于map的设置</span></span><br><span class="line"><span class="keyword">new</span> BeanPropertyValueChangeConsumer&lt;&gt;(<span class="string">&quot;mappedProperty(fred)&quot;</span>, <span class="string">&quot;barney&quot;</span>).accept(testBean);</span><br><span class="line"><span class="comment">// 基于内嵌对象的设置</span></span><br><span class="line"><span class="keyword">new</span> BeanPropertyValueChangeConsumer&lt;&gt;(<span class="string">&quot;nested.stringProperty&quot;</span>, <span class="string">&quot;bar&quot;</span>).accept(testBean);</span><br></pre></td></tr></table></figure>

<h2 id="BeanPropertyValueEqualsPredicate"><a href="#BeanPropertyValueEqualsPredicate" class="headerlink" title="BeanPropertyValueEqualsPredicate"></a>BeanPropertyValueEqualsPredicate</h2><p>用于bean的属性值之间的比较，但与<code>BeanPredicate</code> 的区别是<code>BeanPropertyValueEqualsPredicate</code> 的比较是使用<code>Object.equal</code> 方法，没有<code>BeanPredicate</code> 的灵活</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义属性和属性值</span></span><br><span class="line">BeanPropertyValueEqualsPredicate&lt;TestBean, String&gt; predicate = <span class="keyword">new</span> BeanPropertyValueEqualsPredicate&lt;&gt;(<span class="string">&quot;stringProperty&quot;</span>,<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="comment">// 2.进行比较</span></span><br><span class="line">predicate.test(<span class="keyword">new</span> TestBean(<span class="string">&quot;foo&quot;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于数组比较</span></span><br><span class="line">BeanPropertyValueEqualsPredicate&lt;TestBean, Object&gt; predicate = <span class="keyword">new</span> BeanPropertyValueEqualsPredicate&lt;&gt;(<span class="string">&quot;intIndexed[0]&quot;</span>,expectedIntegerValue);</span><br><span class="line">predicate.test(testBean)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于map比较</span></span><br><span class="line">BeanPropertyValueEqualsPredicate&lt;TestBean, String&gt; predicate = <span class="keyword">new</span> BeanPropertyValueEqualsPredicate&lt;&gt;(<span class="string">&quot;mappedProperty(key)&quot;</span>, <span class="string">&quot;match&quot;</span>);</span><br><span class="line">predicate.test(testBean)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于内嵌对象比较</span></span><br><span class="line">BeanPropertyValueEqualsPredicate&lt;TestBean, String&gt; predicate = <span class="keyword">new</span> BeanPropertyValueEqualsPredicate&lt;&gt;(<span class="string">&quot;anotherNested.stringProperty&quot;</span>,<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">predicate.test(testBean)</span><br></pre></td></tr></table></figure>

<h2 id="BeanToPropertyValueTransformer"><a href="#BeanToPropertyValueTransformer" class="headerlink" title="BeanToPropertyValueTransformer"></a>BeanToPropertyValueTransformer</h2><p>用于获取bean的属性对应的属性值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.定义属性</span></span><br><span class="line">BeanToPropertyValueTransformer&lt;TestBean, String&gt; transformer = <span class="keyword">new</span> BeanToPropertyValueTransformer&lt;&gt;(<span class="string">&quot;stringProperty&quot;</span>);</span><br><span class="line"><span class="comment">// 2.获取属性值</span></span><br><span class="line">TestBean testBean = <span class="keyword">new</span> TestBean(<span class="string">&quot;foo&quot;</span>)</span><br><span class="line">transformer.apply(testBean)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取数组</span></span><br><span class="line">BeanToPropertyValueTransformer&lt;TestBean, Integer&gt; transformer = <span class="keyword">new</span> BeanToPropertyValueTransformer&lt;&gt;(<span class="string">&quot;intIndexed[0]&quot;</span>)</span><br><span class="line">transformer.apply(testBean)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取map</span></span><br><span class="line">BeanToPropertyValueTransformer&lt;TestBean, String&gt; transformer = <span class="keyword">new</span> BeanToPropertyValueTransformer&lt;&gt;(<span class="string">&quot;mappedProperty(key)&quot;</span>)</span><br><span class="line">transformer.apply(testBean)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取内嵌对象</span></span><br><span class="line">BeanToPropertyValueTransformer&lt;TestBean, String&gt; transformer = <span class="keyword">new</span> BeanToPropertyValueTransformer&lt;&gt;(<span class="string">&quot;anotherNested.stringProperty&quot;</span>)</span><br><span class="line">transformer.apply(testBean)</span><br></pre></td></tr></table></figure>

<h2 id="Resolver"><a href="#Resolver" class="headerlink" title="Resolver"></a>Resolver</h2><p>用于对bean中的属性进行解析，可以识别数组、map、内嵌对象。默认的实现是<code>DefaultResolver</code>  其中 <code>PropertyUtilsBean</code> 就是通过这个类来解析bean的属性表达式的</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 内嵌对象的识别  --&gt; name1.name2.name3</span></span><br><span class="line"><span class="comment">// 数组的识别     --&gt; name[index]</span></span><br><span class="line"><span class="comment">// map的识别     --&gt; name(key)</span></span><br><span class="line"></span><br><span class="line">Resolver resolver = <span class="keyword">new</span> DefaultResolver()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.beanutils2.expression.DefaultResolver#getIndex      // 获取指定索引下的值</span><br><span class="line">org.apache.commons.beanutils2.expression.DefaultResolver#getKey        // 获取map下的key</span><br><span class="line">org.apache.commons.beanutils2.expression.DefaultResolver#getProperty   // 获取属性</span><br><span class="line">org.apache.commons.beanutils2.expression.DefaultResolver#hasNested     // 判断是否是内嵌对象</span><br><span class="line">org.apache.commons.beanutils2.expression.DefaultResolver#isIndexed     // 判断是否是数组</span><br><span class="line">org.apache.commons.beanutils2.expression.DefaultResolver#isMapped      // 判断是否是map</span><br></pre></td></tr></table></figure>

<h2 id="BeanUtils和BeanUtilsBean"><a href="#BeanUtils和BeanUtilsBean" class="headerlink" title="BeanUtils和BeanUtilsBean"></a>BeanUtils和BeanUtilsBean</h2><p>BeanUtils中都是静态的方法，每个方法都是调用BeanUtilsBean中的方法并且BeanUtilsBean中定义为单例模式</p>
<p>BeanUtilsBean的单例模式是通过 (thread) context Classloader 来实现的<br>BeanUtilBean是依赖于 <code>ConvertUtilsBean</code> 和 <code>PropertyUtilsBean</code></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.beanutils2.BeanUtilsBean#cloneBean       // 克隆一个新Bean</span><br><span class="line">org.apache.commons.beanutils2.BeanUtilsBean#copyProperties  // 源目对象复制</span><br><span class="line">org.apache.commons.beanutils2.BeanUtilsBean#copyProperty    // 仅复制对象的某个属性</span><br><span class="line">org.apache.commons.beanutils2.BeanUtilsBean#describe        // 将bean转换为一个Map&lt;属性名,属性值&gt;</span><br><span class="line">org.apache.commons.beanutils2.BeanUtilsBean#populate        // 填充bean</span><br></pre></td></tr></table></figure>

<h2 id="ConstructorUtils"><a href="#ConstructorUtils" class="headerlink" title="ConstructorUtils"></a>ConstructorUtils</h2><p>用于类对象利用反射方式实例化一个对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Object obj = ConstructorUtils.invokeConstructor(TestBean.class,<span class="string">&quot;TEST&quot;</span>);</span><br></pre></td></tr></table></figure>

<h2 id="ConvertUtils和ConvertUtilsBean"><a href="#ConvertUtils和ConvertUtilsBean" class="headerlink" title="ConvertUtils和ConvertUtilsBean"></a>ConvertUtils和ConvertUtilsBean</h2><p>用于数据类型之间的转换，<code>ConvertUtilsBean</code>的构造方法中 <code>deregister()</code>  方法会加载<code>**88**</code>个默认的类型转换器类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1.字符串数组转换为包装类型的数组</span></span><br><span class="line"><span class="keyword">final</span> String[] values1 = &#123; <span class="string">&quot;10&quot;</span>, <span class="string">&quot;20&quot;</span>, <span class="string">&quot;30&quot;</span> &#125;;</span><br><span class="line">Object value = ConvertUtils.convert(values1, Integer.TYPE);    <span class="comment">// &#123;10,20,30&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.包装类型转换为字符串数组类型</span></span><br><span class="line"><span class="keyword">final</span> <span class="keyword">int</span>[] intArray1 = <span class="keyword">new</span> <span class="keyword">int</span>[] &#123; <span class="number">0</span> &#125;;</span><br><span class="line">Object value = ConvertUtils.convert(intArray1, String[].class);  <span class="comment">// String[] 看做是一个类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 3.字符串转换为时间类型</span></span><br><span class="line">String input = <span class="string">&quot;2002-03-17&quot;</span>;</span><br><span class="line">Object value = ConvertUtils.convert(input, Date.class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 4.自定义转换类型</span></span><br><span class="line"><span class="keyword">final</span> ConvertUtilsBean utils = <span class="keyword">new</span> ConvertUtilsBean();</span><br><span class="line">utils.register(dateConverter, java.util.Date.class);</span><br><span class="line">utils.convert(today, String.class)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原理：ConvertUtilBean中有一个WeakFastHashMap对象用于保存数据类型和之间的转换映射关系</span></span><br></pre></td></tr></table></figure>

<h2 id="MethodUtils"><a href="#MethodUtils" class="headerlink" title="MethodUtils"></a>MethodUtils</h2><p>用于进行method的反射调用，MethodUtils中有一个<code>WeakHashMap</code> 类型的map来保存method的缓存</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> Method method = MethodUtils.getAccessibleMethod(TestBean.class, <span class="string">&quot;setStringProperty&quot;</span>, String.class);</span><br><span class="line"><span class="keyword">final</span> Object result = MethodUtils.invokeExactMethod(</span><br><span class="line">                <span class="keyword">new</span> AlphaBean(<span class="string">&quot;parent&quot;</span>),</span><br><span class="line">                <span class="string">&quot;getName&quot;</span>,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure>

<h2 id="WeakFastHashMap"><a href="#WeakFastHashMap" class="headerlink" title="WeakFastHashMap"></a>WeakFastHashMap</h2><p>类似于 <code>CopyOnWriteArrayList</code> 的机制，其中通过fast字段来判断是否加锁，在读操作的时候不加锁，写操作的时候加锁</p>
]]></content>
      <categories>
        <category>apache-common</category>
      </categories>
      <tags>
        <tag>apache-common-beanutils</tag>
      </tags>
  </entry>
  <entry>
    <title>Apache-lang</title>
    <url>/2021/05/04/Apache-lang/</url>
    <content><![CDATA[<p>简介：Apache-common lang 提供了很多的Utils类，供于日常开发中进行使用</p>
<img src="/2021/05/04/Apache-lang/lang.png" style="zoom: 50%;">

<a id="more"></a>

<h2 id="AnnotationUtils"><a href="#AnnotationUtils" class="headerlink" title="AnnotationUtils"></a>AnnotationUtils</h2><p>用于操作注解类型</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 这里会判断注解的类型以及注解中的方法的值是否完全一致</span></span><br><span class="line">AnnotationUtils.equals(field1.getAnnotation(TestAnnotation.class), field2.getAnnotation(TestAnnotation.class))</span><br></pre></td></tr></table></figure>

<h2 id="ArraySorter"><a href="#ArraySorter" class="headerlink" title="ArraySorter"></a>ArraySorter</h2><p>用于数组进行排序，本质就是调用 <code>Arrays.sort(array)</code>; 方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="keyword">byte</span>[] array1 = &#123;<span class="number">2</span>, <span class="number">1</span>&#125;;</span><br><span class="line">ArraySorter.sort(array1)</span><br></pre></td></tr></table></figure>

<h2 id="ArrayUtils"><a href="#ArrayUtils" class="headerlink" title="ArrayUtils"></a>ArrayUtils</h2><p>用于操作数组</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.ArrayUtils#add(boolean[], boolean)       // 数组中新增元素</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#addAll(boolean[], boolean...) // 将一个数组中的元素全部添加到另一个数组中</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#addFirst(boolean[], boolean)  // 添加到数组开头</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#contains(boolean[], boolean)  // 判断数组中是否包含这个元素</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#get(T[], int, T)              // 获取指定index的数组元素</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#indexesOf(boolean[], boolean) // 查询元素是否存在于数组中</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#insert(int, byte[], byte...)  // 指定位置查询数组元素</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#isArrayIndexValid(T[], int)   // 判断索引是否越界</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#isEmpty(boolean[])            // 判断数组是否为空</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#isSorted(boolean[])           // 判断数组是否自然排序</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#remove(boolean[], int)        // 删除数组中指定索引的元素</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#removeAll(double[], int...)   // 删除数组中指定多个索引的元素</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#removeElement(boolean[], boolean)  // 删除指定元素</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#reverse(boolean[])            // 数组逆序排序</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#shuffle(boolean[])            // 打乱数组元素位置</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#subarray(boolean[], int, int) // 截取数组</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#swap(boolean[], int, int)     // 数组中元素位置进行交换</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#toMap(Object[])               // 将二维数组或Map.entry转换为Map</span><br><span class="line">org.apache.commons.lang3.ArrayUtils#toPrimitive(java.lang.Boolean[]) // 将保证类型转换为基本类型</span><br></pre></td></tr></table></figure>

<h2 id="BooleanUtils"><a href="#BooleanUtils" class="headerlink" title="BooleanUtils"></a>BooleanUtils</h2><p>用于操作Boolean类型</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.BooleanUtils#and(boolean...)      // 聚合比较</span><br><span class="line">org.apache.commons.lang3.BooleanUtils#booleanValues()      // 获取boolean数组的所有取值</span><br><span class="line">org.apache.commons.lang3.BooleanUtils#isFalse(Boolean)     // 判断是否为false</span><br><span class="line">org.apache.commons.lang3.BooleanUtils#or(boolean...)       // 判断只要有一个true就是true</span><br><span class="line">org.apache.commons.lang3.BooleanUtils#toBoolean(java.lang.Boolean) // 将包装类型转换为基本数据类型</span><br><span class="line">org.apache.commons.lang3.BooleanUtils#toBoolean(java.lang.String)  // 将字符串转为boolean类型</span><br><span class="line">org.apache.commons.lang3.BooleanUtils#toInteger(boolean)   // 将boolean类型转换未integer类型(true: 1 false: 0)</span><br><span class="line">org.apache.commons.lang3.BooleanUtils#toInteger(boolean, int, int) // 转换指定的数值</span><br><span class="line">org.apache.commons.lang3.BooleanUtils#toString(boolean, java.lang.String, java.lang.String) // boolean类型转换为string类型</span><br></pre></td></tr></table></figure>

<h2 id="CharSequenceUtils"><a href="#CharSequenceUtils" class="headerlink" title="CharSequenceUtils"></a>CharSequenceUtils</h2><p>用于操作字符串或者字符类型</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.CharSequenceUtils#subSequence      // 进行字符串的截取等效于**String#substring(int)**</span><br><span class="line">org.apache.commons.lang3.CharSequenceUtils#indexOf(java.lang.CharSequence, int, int) // 查询字符串中是否存在这个字符</span><br><span class="line">org.apache.commons.lang3.CharSequenceUtils#toCharArray      // 字符串转数组</span><br></pre></td></tr></table></figure>

<h2 id="CharSetUtils"><a href="#CharSetUtils" class="headerlink" title="CharSetUtils"></a>CharSetUtils</h2><p>用于操作字符</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.CharSetUtils#containsAny(String,String...)   // 判断字符串中是否还有给定的字符范围</span><br><span class="line">org.apache.commons.lang3.CharSetUtils#count(String,String...)         // 统计字符串中含有给定字符范围的个数</span><br><span class="line">org.apache.commons.lang3.CharSetUtils#delete(String,String...)        // 删除字符串中含有的字符</span><br><span class="line">org.apache.commons.lang3.CharSetUtils#keep(String,String...)          // 只保留给定的字符</span><br></pre></td></tr></table></figure>

<h2 id="CharUtils"><a href="#CharUtils" class="headerlink" title="CharUtils"></a>CharUtils</h2><p>用于进行字符操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.apache.commons.lang3.CharUtils#isAscii        // 判断是否是ascii码</span><br></pre></td></tr></table></figure>

<h2 id="ClassPathUtils"><a href="#ClassPathUtils" class="headerlink" title="ClassPathUtils"></a>ClassPathUtils</h2><p>用于获取classpath的路径名</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 获取这个类的全限定类名</span></span><br><span class="line"><span class="comment">// ClassPathUtils.toFullyQualifiedName(StringUtils.class, &quot;StringUtils.properties&quot;) = &quot;org.apache.commons.lang3.StringUtils.properties&quot;</span></span><br><span class="line">org.apache.commons.lang3.ClassPathUtils#toFullyQualifiedName(java.lang.Class&lt;?&gt;, java.lang.String)  </span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取这个类的路径名</span></span><br><span class="line"><span class="comment">// ClassPathUtils.toFullyQualifiedPath(StringUtils.class, &quot;StringUtils.properties&quot;) = &quot;org/apache/commons/lang3/StringUtils.properties&quot;</span></span><br><span class="line">org.apache.commons.lang3.ClassPathUtils#toFullyQualifiedPath(java.lang.Class&lt;?&gt;, java.lang.String)</span><br></pre></td></tr></table></figure>

<h2 id="ClassUtils"><a href="#ClassUtils" class="headerlink" title="ClassUtils"></a>ClassUtils</h2><p>用于对class操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.ClassUtils#getShortClassName(java.lang.Class&lt;?&gt;)    // 获取短的类名</span><br><span class="line">org.apache.commons.lang3.ClassUtils#getSimpleName(java.lang.Class&lt;?&gt;)        // 获取简单类名</span><br><span class="line">org.apache.commons.lang3.ClassUtils#getName(java.lang.Class&lt;?&gt;)              // 获取类的全类名</span><br><span class="line">org.apache.commons.lang3.ClassUtils#getPackageName(java.lang.Class&lt;?&gt;)       // 获取类的包名</span><br><span class="line">org.apache.commons.lang3.ClassUtils#getAbbreviatedName(java.lang.Class&lt;?&gt;, int)   // 获取缩写的名字</span><br><span class="line">org.apache.commons.lang3.ClassUtils#getAllSuperclasses(java.lang.Class&lt;?&gt;)   // 获取指定类的所有父类</span><br><span class="line">org.apache.commons.lang3.ClassUtils#getAllInterfaces(java.lang.Class&lt;?&gt;)     // 获取当前类所有的接口</span><br><span class="line">org.apache.commons.lang3.ClassUtils#convertClassNamesToClasses(List&lt;String&gt;) // 将clasName转化为class类</span><br><span class="line">org.apache.commons.lang3.ClassUtils#convertClassesToClassNames(List&lt;Class&lt;?&gt;&gt;) //将class类转换为className名</span><br><span class="line">org.apache.commons.lang3.ClassUtils#isAssignable(java.lang.Class&lt;?&gt;[], java.lang.Class&lt;?&gt;...) // 一个类是否可以属于另一个了类增加了对保证类型的封装</span><br><span class="line">ClassUtils.isAssignable(Boolean.TYPE, Boolean.class, <span class="keyword">false</span>)    <span class="comment">// 关闭自动拆装箱</span></span><br><span class="line"></span><br><span class="line">org.apache.commons.lang3.ClassUtils#isPrimitiveOrWrapper(Class&lt;?&gt;)           // 判断是否是基本数据类型还是包装类型</span><br><span class="line">org.apache.commons.lang3.ClassUtils#primitiveToWrapper(Class&lt;?&gt;)             // 基本数据类型的class转换为包装类型的class</span><br><span class="line">org.apache.commons.lang3.ClassUtils#wrapperToPrimitive(Class&lt;?&gt;)             // 包装类型的class转换为基本数据类型的class</span><br><span class="line"></span><br><span class="line">org.apache.commons.lang3.ClassUtils#isInnerClass(Class&lt;?&gt;)                   // 判断是否是内部类</span><br><span class="line">org.apache.commons.lang3.ClassUtils#getPublicMethod(Class&lt;?&gt;, String, Class&lt;?&gt;...)  // 获取指定类中public的方法包含继承和实现的</span><br><span class="line"></span><br><span class="line">org.apache.commons.lang3.ClassUtils#getCanonicalName(java.lang.Class&lt;?&gt;)     //获取一个标准的类名</span><br><span class="line">ClassUtils.getCanonicalName(String[][][][].class, <span class="string">&quot;X&quot;</span>)     <span class="comment">// java.lang.String[][][][]</span></span><br><span class="line">ClassUtils.getCanonicalName(<span class="keyword">boolean</span>[].class)               <span class="comment">// boolean[]</span></span><br><span class="line"></span><br><span class="line">org.apache.commons.lang3.ClassUtils#getPackageCanonicalName(java.lang.Class&lt;?&gt;) // 返回一个标准的包名</span><br><span class="line">ClassUtils.getPackageCanonicalName(ClassUtils.class)                            <span class="comment">// org.apache.commons.lang3</span></span><br></pre></td></tr></table></figure>

<h2 id="EnumUtils"><a href="#EnumUtils" class="headerlink" title="EnumUtils"></a>EnumUtils</h2><p>用于对枚举的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.EnumUtils#getEnum(java.lang.Class&lt;E&gt;, java.lang.String)  // 获取指定的枚举</span><br><span class="line">org.apache.commons.lang3.EnumUtils#getEnumIgnoreCase(java.lang.Class&lt;E&gt;, java.lang.String) // 忽略字母大小写获取枚举</span><br><span class="line">org.apache.commons.lang3.EnumUtils#getEnumList(java.lang.Class&lt;E&gt;)       // 获取枚举集合</span><br><span class="line">org.apache.commons.lang3.EnumUtils#getEnumMap(java.lang.Class&lt;E&gt;)        // 获取枚举Map</span><br><span class="line">org.apache.commons.lang3.EnumUtils#isValidEnum(java.lang.Class&lt;E&gt;)       // 验证是否存在此枚举项</span><br><span class="line">org.apache.commons.lang3.EnumUtils#isValidEnumIgnoreCase(java.lang.Class&lt;E&gt;) // 忽略大小写验证是否存在此枚举项</span><br></pre></td></tr></table></figure>

<p>Enum.valueOf(enumClass, enumName)<br>java.lang.Class#getEnumConstants        获取枚举常量</p>
<h2 id="ObjectUtils"><a href="#ObjectUtils" class="headerlink" title="ObjectUtils"></a>ObjectUtils</h2><p>对Object对象的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.ObjectUtils#allNull(Object...)    // 判断所有的值都是null</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#allNotNull(Object...) // 判断所有的值都不为null</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#anyNull(Object...)    // 是否存在任意一个为null的值</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#anyNotNull(Object...) // 是否存在任意一个不为null的</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#compare(T, T)         // 比较两个Comparable的实现类</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#defaultIfNull(T,T)    // 判断一个值是否为null,如果为null则返回defaultValue值</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#firstNonNull(T...)    // 返回第一个不为null的值</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#getIfNull(T,Supplier) // 如果值为null，则执行supplier</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#identityToString(java.lang.Object) // 返回对象的hash值</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#isEmpty(Object)       // 判断object是否是空</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#isNotEmpty(Object)    // 判断object是否不是空</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#max(T...)             // 找出数组中最大的</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#median(java.util.Comparator&lt;T&gt;, T...)   // 找出中间的数字</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#min(T...)             // 找出数组中最小值</span><br><span class="line">org.apache.commons.lang3.ObjectUtils#notEqual(T,T)         // 两个值不相等</span><br></pre></td></tr></table></figure>

<p><code>hashCode</code>和<code>identityHashCode</code>区别？<br>如果对象没有重写hashCode方法，则两者是一样的，如果重写了<code>hashCode</code>方法调用hashCode方法的时候会使用重写的，而<code>identityHashCode</code>则是一直不会改变的</p>
<h2 id="RandomStringUtils"><a href="#RandomStringUtils" class="headerlink" title="RandomStringUtils"></a>RandomStringUtils</h2><p>用于获取随机字符串</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.RandomStringUtils#random(int)          // 产生n位长度的随机字符串，中文环境下是乱码</span><br><span class="line">org.apache.commons.lang3.RandomStringUtils#randomNumeric(int)   // 获取n位的数字字符串</span><br><span class="line">org.apache.commons.lang3.RandomStringUtils#random(int, java.lang.String)   // 在string中获取返回n位的字符串</span><br><span class="line">org.apache.commons.lang3.RandomStringUtils#random(int, char...) // 在指定字符范围中获取n位的字符串</span><br><span class="line"></span><br><span class="line">RandomStringUtils.random(<span class="number">9</span>,<span class="string">&quot;abcdefg&quot;</span>)     <span class="comment">// fdfgfadbf</span></span><br><span class="line">RandomStringUtils.random(<span class="number">5</span>, <span class="keyword">new</span> <span class="keyword">char</span>[]&#123;<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>&#125;) </span><br></pre></td></tr></table></figure>

<h2 id="RandomUtils"><a href="#RandomUtils" class="headerlink" title="RandomUtils"></a>RandomUtils</h2><p>用于随机数的获取</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.RandomUtils#nextInt(int, int)      // 返回一个指定范围的随机数</span><br></pre></td></tr></table></figure>

<h2 id="Range"><a href="#Range" class="headerlink" title="Range"></a>Range</h2><p>用于范围的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.Range#between(T, T)            // 返回一个范围内的对象，默认进行自然排序比较两个数谁是最小值或最大值</span><br><span class="line">org.apache.commons.lang3.Range#contains(T)              // 范围内是否包含这个值</span><br><span class="line">org.apache.commons.lang3.Range#containsRange(Range&lt;T&gt;)  // 范围内释放包含另一个范围</span><br><span class="line">org.apache.commons.lang3.Range#elementCompareTo(T)      // 判断指定元素在范围的左侧还是右侧</span><br><span class="line">org.apache.commons.lang3.Range#intersectionWith(Range&lt;T&gt;) // 两个范围内的交集</span><br><span class="line">org.apache.commons.lang3.Range#isAfter(T)               // 指定元素小于最小值</span><br><span class="line">org.apache.commons.lang3.Range#isBefore(T)              // 指定元素大于最大值</span><br><span class="line">org.apache.commons.lang3.Range#isEndedBy(T)             // 指定元素等于最大值</span><br><span class="line">org.apache.commons.lang3.Range#isStartedBy(T)           // 指定元素等于最小值</span><br><span class="line">org.apache.commons.lang3.Range#isOverlappedBy(Range&lt;T&gt;) // 判断两个Range是否有重叠部分</span><br><span class="line">org.apache.commons.lang3.Range#fit(T)                   // 返回当前元素、最小值、最大值</span><br></pre></td></tr></table></figure>

<h2 id="RegExUtils"><a href="#RegExUtils" class="headerlink" title="RegExUtils"></a>RegExUtils</h2><p>用于处理正则表达式</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.RegExUtils#removeAll(java.lang.String, java.util.regex.Pattern)  // 删除匹配到的所有</span><br><span class="line">org.apache.commons.lang3.RegExUtils#removeFirst(java.lang.String, java.util.regex.Pattern) // 删除匹配到的第一个</span><br><span class="line">org.apache.commons.lang3.RegExUtils#replaceAll(java.lang.String, java.util.regex.Pattern, java.lang.String) // 替换所有</span><br><span class="line">org.apache.commons.lang3.RegExUtils#replaceFirst(java.lang.String, java.util.regex.Pattern, java.lang.String) // 替换第一个</span><br></pre></td></tr></table></figure>

<h2 id="SerializationUtils"><a href="#SerializationUtils" class="headerlink" title="SerializationUtils"></a>SerializationUtils</h2><p>用于用对象流进行序列化与反序列化</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.apache.commons.lang3.SerializationUtils#serialize(java.io.Serializable) // 序列化</span><br><span class="line">org.apache.commons.lang3.SerializationUtils#deserialize(byte[])             // 反序列化</span><br></pre></td></tr></table></figure>

<h2 id="StringUtils"><a href="#StringUtils" class="headerlink" title="StringUtils"></a>StringUtils</h2><p>用于字符串之间的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line"><span class="comment">// StringUtils.abbreviate(&quot;abcdefg&quot;, 6) = &quot;abc...&quot;</span></span><br><span class="line">org.apache.commons.lang3.StringUtils#abbreviate(java.lang.String, int)   // 缩写字符串</span><br><span class="line">org.apache.commons.lang3.StringUtils#appendIfMissingIgnoreCase(String,CharSequence,CharSequence...)  // 忽略大小写的拼接</span><br><span class="line">org.apache.commons.lang3.StringUtils#capitalize(String)                  // 首字母大写</span><br><span class="line">org.apache.commons.lang3.StringUtils#center(java.lang.String, int)       // 以string为中心，填充固定长度不够用空串表示</span><br><span class="line">org.apache.commons.lang3.StringUtils#chomp(java.lang.String)             // 移除转义符 \r \n \r\n</span><br><span class="line">org.apache.commons.lang3.StringUtils#chop(java.lang.String)              // 移除最后一个元素，如果是\r\n都会一起删除</span><br><span class="line">org.apache.commons.lang3.StringUtils#compare(java.lang.String, java.lang.String) // 字符串之间的比较</span><br><span class="line">org.apache.commons.lang3.StringUtils#compareIgnoreCase(java.lang.String, java.lang.String) // 忽略大小写比较</span><br><span class="line">org.apache.commons.lang3.StringUtils#contains(java.lang.CharSequence, java.lang.CharSequence) // 字符是否包含另一个字符</span><br><span class="line">org.apache.commons.lang3.StringUtils#containsAny(java.lang.CharSequence, char...)  // 字符是否包含其中任意一个</span><br><span class="line">org.apache.commons.lang3.StringUtils#containsNone(java.lang.CharSequence, char...) // 字符不包含任意一个</span><br><span class="line">org.apache.commons.lang3.StringUtils#containsWhitespace(java.lang.CharSequence)    // 检查是否包含空白字符</span><br><span class="line">org.apache.commons.lang3.StringUtils#countMatches(java.lang.CharSequence, char)    // 统计有几个字符匹配</span><br><span class="line">org.apache.commons.lang3.StringUtils#defaultIfBlank(T,T)                  // 为空置为defaultValue</span><br><span class="line">org.apache.commons.lang3.StringUtils#deleteWhitespace(String)             // 删除空白</span><br><span class="line">org.apache.commons.lang3.StringUtils#difference(String,String)            // 比较两个字符串不同的，返回str2不同的部分</span><br><span class="line">org.apache.commons.lang3.StringUtils#endsWith(java.lang.CharSequence, java.lang.CharSequence) // 以什么字符结尾</span><br><span class="line">org.apache.commons.lang3.StringUtils#endsWithAny(java.lang.CharSequence, java.lang.CharSequence) // 以任意字符结尾</span><br><span class="line">org.apache.commons.lang3.StringUtils#firstNonBlank(T...)                  // 返回一个不为null的值</span><br><span class="line">org.apache.commons.lang3.StringUtils#getCommonPrefix(T...)                // 获取字符串中公共的前缀</span><br><span class="line">org.apache.commons.lang3.StringUtils#getDigits(String)                    // 返回字符串中的数字</span><br><span class="line">org.apache.commons.lang3.StringUtils#getIfBlank(String,Supplier)          // 如果str是空，则执行supplier</span><br><span class="line">org.apache.commons.lang3.StringUtils#indexOf(java.lang.CharSequence, java.lang.CharSequence) // 返回指定字符所在的索引位置</span><br><span class="line">org.apache.commons.lang3.StringUtils#indexOfDifference(java.lang.CharSequence...)  // 字符串不同时候开始的索引位置</span><br><span class="line">org.apache.commons.lang3.StringUtils#isAllLowerCase(T...)                 // 全部是大写</span><br><span class="line">org.apache.commons.lang3.StringUtils#isNumeric(String)                    // 是否是数字</span><br><span class="line">org.apache.commons.lang3.StringUtils#join(boolean[], char)                // 将数组转换为字符串，通过分隔符隔开</span><br><span class="line">org.apache.commons.lang3.StringUtils#join(java.lang.Iterable&lt;?&gt;, char)    // 将集合转换为字符串，通过分隔符隔开</span><br><span class="line">org.apache.commons.lang3.StringUtils#join(T...)                           // 数组转为字符串</span><br><span class="line">org.apache.commons.lang3.StringUtils#left(String, int)                    // 从左开始只保留字符串的前几位长度</span><br><span class="line">org.apache.commons.lang3.StringUtils#leftPad(java.lang.String, int)       // 从左边开始，不够长度的用space进行填充</span><br><span class="line">org.apache.commons.lang3.StringUtils#overlay(String,String,int,int)       // 字符串中字符进行覆盖</span><br><span class="line">org.apache.commons.lang3.StringUtils#prependIfMissing(java.lang.String, java.lang.CharSequence, boolean, java.lang.CharSequence...) // 追加到前面</span><br><span class="line">org.apache.commons.lang3.StringUtils#remove(java.lang.String, char)       // 删除某个字符</span><br><span class="line">org.apache.commons.lang3.StringUtils#removeEnd(String,String)             // 删除指定结尾的字符</span><br><span class="line">org.apache.commons.lang3.StringUtils#removeStart(String,String)           // 删除指定开头的字符</span><br><span class="line">org.apache.commons.lang3.StringUtils#repeat(char, int)                    // 重复出现字符</span><br><span class="line">org.apache.commons.lang3.StringUtils#reverse(String)                      // 逆序字符串</span><br><span class="line">org.apache.commons.lang3.StringUtils#rightPad(java.lang.String, int)      // 从右边开始填充</span><br><span class="line">org.apache.commons.lang3.StringUtils#split(java.lang.String, char)        // 字符串拆分</span><br><span class="line">org.apache.commons.lang3.StringUtils#strip(java.lang.String)              // 删除字符串两侧的空白</span><br><span class="line">org.apache.commons.lang3.StringUtils#stripEnd(java.lang.String)           // 只删除末尾的字符空白</span><br><span class="line">org.apache.commons.lang3.StringUtils#substringAfter(java.lang.String, int) // 从哪个字符后开始裁剪</span><br><span class="line">org.apache.commons.lang3.StringUtils#substringBefore(java.lang.String, int) // 从哪个字符前开始裁剪</span><br><span class="line">org.apache.commons.lang3.StringUtils#substringBetween(java.lang.String, java.lang.String, java.lang.String) // 从两个字符间进行裁剪</span><br><span class="line">org.apache.commons.lang3.StringUtils#swapCase(java.lang.String)             // 字符串大小写切换</span><br><span class="line">org.apache.commons.lang3.StringUtils#wrap(java.lang.String, java.lang.String) // 前后包裹字符串</span><br></pre></td></tr></table></figure>

<h2 id="ThreadUtils"><a href="#ThreadUtils" class="headerlink" title="ThreadUtils"></a>ThreadUtils</h2><p>用于线程的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 场景方法</span></span><br><span class="line">org.apache.commons.lang3.ThreadUtils#findThreadById(long, java.lang.ThreadGroup)    // 在线程组中查找指定的threadId对应的thread</span><br><span class="line">org.apache.commons.lang3.ThreadUtils#findThreadById(long)         // 获取线程</span><br><span class="line">org.apache.commons.lang3.ThreadUtils#getAllThreads()              // 获取所有线程</span><br></pre></td></tr></table></figure>

<h2 id="Validate"><a href="#Validate" class="headerlink" title="Validate"></a>Validate</h2><p>用于抛出异常的文案设置</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">isTrue</span><span class="params">(<span class="keyword">final</span> <span class="keyword">boolean</span> expression, <span class="keyword">final</span> String message, <span class="keyword">final</span> Object... values)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!expression) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(message, values));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="ToStringBuilder"><a href="#ToStringBuilder" class="headerlink" title="ToStringBuilder"></a>ToStringBuilder</h2><p>用于构造toString的样式输出</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaxReturn</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> String ssn;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">int</span> year;</span><br><span class="line">  <span class="keyword">private</span> String lastName;</span><br><span class="line">  <span class="keyword">private</span> BigDecimal taxableIncome;</span><br><span class="line">  <span class="comment">// get/set方法省略</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">TaxReturn</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// ToStringBuilder来构造toString方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> ToStringBuilder(<span class="keyword">this</span>).append(<span class="string">&quot;ssn&quot;</span>, ssn).append(<span class="string">&quot;year&quot;</span>, year).append(<span class="string">&quot;lastName&quot;</span>,</span><br><span class="line">        lastName).toString();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// HashCodeBuilder来构造hashCode方法 </span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> HashCodeBuilder(<span class="number">3</span>, <span class="number">7</span>).append(ssn).append(year).toHashCode();</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// EqualsBuilder来构造equals方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object pObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">boolean</span> equals = <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">if</span> (pObject <span class="keyword">instanceof</span> TaxReturn) &#123;</span><br><span class="line">      TaxReturn bean = (TaxReturn) pObject;</span><br><span class="line">      equals = (<span class="keyword">new</span> EqualsBuilder().append(ssn, bean.ssn).append(year, bean.year)).isEquals();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> equals;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">  <span class="comment">// CompareToBuilder来构造compareTo方法</span></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Object pObject)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> CompareToBuilder.reflectionCompare(<span class="keyword">this</span>, pObject);</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="ComparableUtils"><a href="#ComparableUtils" class="headerlink" title="ComparableUtils"></a>ComparableUtils</h2><p>用于比较操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ComparableUtils.is(<span class="number">2</span>).between(<span class="number">1</span>, <span class="number">10</span>)          <span class="comment">// 比较一个数是否在两数之间</span></span><br><span class="line">ComparableUtils.is(a).greaterThanOrEqualTo(b) <span class="comment">// a大于或等于b</span></span><br></pre></td></tr></table></figure>

<h2 id="ExceptionUtils"><a href="#ExceptionUtils" class="headerlink" title="ExceptionUtils"></a>ExceptionUtils</h2><p>用于异常类型包装</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String[] stackTrace = ExceptionUtils.getRootCauseStackTrace(cause);   <span class="comment">// 打印异常堆栈信息</span></span><br></pre></td></tr></table></figure>

<h2 id="Fraction"><a href="#Fraction" class="headerlink" title="Fraction"></a>Fraction</h2><p>用于分数的操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">Fraction.ZERO.getNumerator()          <span class="comment">// 分子为0</span></span><br><span class="line">Fraction.ZERO.getDenominator())       <span class="comment">// 分母也为0</span></span><br><span class="line">Fraction f = Fraction.getFraction(-<span class="number">6</span>, <span class="number">10</span>)  <span class="comment">// 定义一个-6/10</span></span><br><span class="line">Fraction f = Fraction.getFraction(<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>) <span class="comment">// 定义一个 1 1/2</span></span><br><span class="line"><span class="comment">// 加法</span></span><br><span class="line">f1 = Fraction.getFraction(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">f2 = Fraction.getFraction(-<span class="number">4</span>, <span class="number">5</span>);</span><br><span class="line">f = f1.add(f2);</span><br><span class="line"><span class="comment">// 减法</span></span><br><span class="line">f1 = Fraction.getFraction(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">f2 = Fraction.getFraction(<span class="number">1</span>, <span class="number">5</span>);</span><br><span class="line">f = f1.subtract(f2);</span><br><span class="line"><span class="comment">// 乘法</span></span><br><span class="line">f1 = Fraction.getFraction(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">f2 = Fraction.getFraction(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">f = f1.multiplyBy(f2);</span><br><span class="line"><span class="comment">// 除法</span></span><br><span class="line">f1 = Fraction.getFraction(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">f2 = Fraction.getFraction(<span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">f = f1.divideBy(f2);</span><br><span class="line"></span><br><span class="line">Fraction f1;</span><br><span class="line">Fraction f2;</span><br><span class="line"></span><br><span class="line">f1 = Fraction.getFraction(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">f2 = Fraction.getFraction(<span class="number">3</span>, <span class="number">5</span>);</span><br><span class="line">f1.compareTo(f2)</span><br></pre></td></tr></table></figure>

<h2 id="IEEE754rUtils"><a href="#IEEE754rUtils" class="headerlink" title="IEEE754rUtils"></a>IEEE754rUtils</h2><p>用于获取数组中最大值或最小值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">IEEE754rUtils.min(<span class="number">1.2</span>, <span class="number">2.5</span>, Double.NaN)    <span class="comment">// 获取最小值</span></span><br><span class="line">IEEE754rUtils.max(<span class="number">1.2</span>, <span class="number">2.5</span>, Double.NaN     <span class="comment">// 获取最大值</span></span><br></pre></td></tr></table></figure>

<h2 id="NumberUtils"><a href="#NumberUtils" class="headerlink" title="NumberUtils"></a>NumberUtils</h2><p>用于操作数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#toInt(java.lang.String)          // 字符串转换为整型数值</span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#toLong(java.lang.String)         // 字符串转换为长整型数值</span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#toScaledBigDecimal(java.lang.String, int, java.math.RoundingMode)   // 设置BigDecimal的scale</span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#createInteger(java.lang.String)  // 字符串转换为Integer类型</span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#createLong(java.lang.String)     // 字符串转换为长整型类型</span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#min(long...)                     // 数组中最小值</span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#max(long...)                     // 数组中最大值</span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#isDigits(java.lang.String)       // 验证是否是一个数字</span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#compare(int, int)                // 两数字进行比较</span><br><span class="line"></span><br><span class="line">org.apache.commons.lang3.math.NumberUtils#INTEGER_ZERO                     // 有一些常量供使用</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="Mutable"><a href="#Mutable" class="headerlink" title="Mutable"></a>Mutable</h2><p>可变的基本类型，实现类有<code>MutableBoolean</code>、<code>MutableByte</code>、<code>MutableDouble</code>、<code>MutableFloat</code>、<code>MutableInt</code>、<code>MutableLong</code>、<code>MutableObject</code>、<code>MutableShort</code>  为什么会存在这样的类(不是有Integer的包装类)? 因为Integer类是不能直接做基本类型的<strong>四则运算</strong>的且Integer是<strong>不可变了类型</strong>所以效率上没有<strong>可变类型</strong>的高。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Map&lt;String,MutableInteger&gt; map = <span class="keyword">new</span> HashMap();    <span class="comment">// 用于泛型中使用</span></span><br></pre></td></tr></table></figure>

<h2 id="ConstructorUtils"><a href="#ConstructorUtils" class="headerlink" title="ConstructorUtils"></a>ConstructorUtils</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">org.apache.commons.lang3.reflect.ConstructorUtils#invokeConstructor(java.lang.Class&lt;T&gt;, java.lang.Object...)</span><br></pre></td></tr></table></figure>

<h2 id="FieldUtils"><a href="#FieldUtils" class="headerlink" title="FieldUtils"></a>FieldUtils</h2><p>用于反射字段对象的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.reflect.FieldUtils#getField(java.lang.Class&lt;?&gt;, java.lang.String)    // 获取指定字段的Field对象</span><br><span class="line">org.apache.commons.lang3.reflect.FieldUtils#getDeclaredField(java.lang.Class&lt;?&gt;, java.lang.String) // 获取指定字段Field对象</span><br><span class="line">org.apache.commons.lang3.reflect.FieldUtils#getAllFields(java.lang.Class&lt;?&gt;)                  // 获取所有的字段以及父类的</span><br><span class="line">org.apache.commons.lang3.reflect.FieldUtils#getFieldsWithAnnotation(java.lang.Class&lt;?&gt;,Annotion) // 获取含有指定注解的字段</span><br><span class="line">org.apache.commons.lang3.reflect.FieldUtils#readStaticField(java.lang.reflect.Field)          // 获取静态字段的值</span><br><span class="line">org.apache.commons.lang3.reflect.FieldUtils#readField(java.lang.Object, java.lang.String)     // 读普通字段的值</span><br><span class="line">org.apache.commons.lang3.reflect.FieldUtils#writeStaticField(java.lang.reflect.Field, java.lang.Object) // 写静态字段的值</span><br></pre></td></tr></table></figure>

<h2 id="InheritanceUtils"><a href="#InheritanceUtils" class="headerlink" title="InheritanceUtils"></a>InheritanceUtils</h2><p>用于获取子类和父类之间的层级</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">assertEquals(<span class="number">1</span>, InheritanceUtils.distance(AnotherChild.class, AnotherParent.class));</span><br><span class="line">assertEquals(<span class="number">1</span>, InheritanceUtils.distance(Grandchild.class, AnotherChild.class));</span><br><span class="line">assertEquals(<span class="number">2</span>, InheritanceUtils.distance(Grandchild.class, AnotherParent.class));</span><br><span class="line">assertEquals(<span class="number">3</span>, InheritanceUtils.distance(Grandchild.class, Object.class));<span class="comment">//</span></span><br></pre></td></tr></table></figure>

<h2 id="MethodUtils"><a href="#MethodUtils" class="headerlink" title="MethodUtils"></a>MethodUtils</h2><p>用于反射方法的操作</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.reflect.MethodUtils#invokeMethod(java.lang.Object, java.lang.String)  // 执行方法</span><br><span class="line">org.apache.commons.lang3.reflect.MethodUtils#invokeMethod(java.lang.Object, java.lang.String, java.lang.Object...) // 执行含参数的方法</span><br><span class="line">org.apache.commons.lang3.reflect.MethodUtils#getMethodsWithAnnotation(java.lang.Class&lt;?&gt;, java.lang.Class&lt;? extends java.lang.annotation.Annotation&gt;) // 获取标记指定注解的方法</span><br></pre></td></tr></table></figure>

<h2 id="TypeUtils"><a href="#TypeUtils" class="headerlink" title="TypeUtils"></a>TypeUtils</h2><p>用于java类型的操作。<code>ParameterizedType</code>参数化类型、<code>TypeVariable</code>类型变量、<code>GenericArrayType</code>泛型数组、<code>WildcardType</code>通配符类型。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">org.apache.commons.lang3.reflect.TypeUtils#containsTypeVariables(Type)       // 判断是否是type类型</span><br></pre></td></tr></table></figure>

<h2 id="DateFormatUtils-amp-DateUtils"><a href="#DateFormatUtils-amp-DateUtils" class="headerlink" title="DateFormatUtils &amp; DateUtils"></a>DateFormatUtils &amp; DateUtils</h2><p>用于时间操作</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 常见方法</span></span><br><span class="line">DateFormatUtils.format(c.getTime(), <span class="string">&quot;yyyyMdH&quot;</span>)      <span class="comment">// 格式化时间</span></span><br><span class="line">DateUtils.addHours(BASE_DATE, -<span class="number">1</span>)                   <span class="comment">// 减少一小时</span></span><br></pre></td></tr></table></figure>

<h2 id="Pair-amp-Triple"><a href="#Pair-amp-Triple" class="headerlink" title="Pair &amp; Triple"></a>Pair &amp; Triple</h2><p>用于操作二元组或三元组。Pair的子类有<code>MutablePair</code> 和 <code>ImmutablePair</code>  Triple的子类有 <code>MutableTriple</code> 和 <code>ImmutableTriple</code> </p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pair&lt;String, String&gt; pair = Pair.of(<span class="string">&quot;Key&quot;</span>, <span class="string">&quot;Value&quot;</span>)                       <span class="comment">// 二元组定义不可变类型</span></span><br><span class="line"><span class="keyword">final</span> Triple&lt;String, String, String&gt; triple1 = Triple.of(<span class="string">&quot;A&quot;</span>, <span class="string">&quot;D&quot;</span>, <span class="string">&quot;A&quot;</span>)   <span class="comment">// 三元组定义不可变类型</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>apache-common</category>
      </categories>
      <tags>
        <tag>apache-common-lang</tag>
      </tags>
  </entry>
  <entry>
    <title>idea多线程调试</title>
    <url>/2021/05/06/idea-debug/</url>
    <content><![CDATA[<p>简介：记录idea多线程调试</p>
<img src="/2021/05/06/idea-debug/debug.jpeg" style="zoom: 50%;">

<a id="more"></a>

<h3 id="设置方法断点"><a href="#设置方法断点" class="headerlink" title="设置方法断点"></a>设置方法断点</h3><p><img src="/2021/05/06/idea-debug/Untitled.png" alt="idea-debug/Untitled.png"></p>
<h3 id="代码编写"><a href="#代码编写" class="headerlink" title="代码编写"></a>代码编写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 多线程调试</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadDemo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">        service.submit(<span class="keyword">new</span> Thread(<span class="keyword">new</span> TaskOne(), <span class="string">&quot;TaskOne&quot;</span>));</span><br><span class="line">        service.submit(<span class="keyword">new</span> Thread(<span class="keyword">new</span> TaskTwo(), <span class="string">&quot;TaskTwo&quot;</span>));</span><br><span class="line">        service.submit(<span class="keyword">new</span> Thread(<span class="keyword">new</span> TaskThree(), <span class="string">&quot;TaskThree&quot;</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;main thread is end ...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskOne</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;TaskOne is running...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskTwo</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;TaskTwo is running...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">TaskThree</span> <span class="keyword">implements</span> <span class="title">Runnable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;TaskThree is running...&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="栈帧切换调试线程"><a href="#栈帧切换调试线程" class="headerlink" title="栈帧切换调试线程"></a>栈帧切换调试线程</h3><p><img src="/2021/05/06/idea-debug/Untitled%201.png" alt="idea-debug/Untitled%201.png"></p>
]]></content>
      <categories>
        <category>IntelliJ IDEA</category>
      </categories>
      <tags>
        <tag>IntelliJ IDEA</tag>
      </tags>
  </entry>
</search>
